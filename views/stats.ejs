<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>Stats for <%= shortUrl.short %></title>
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css" />
  <style>
    .json-tree {
      background: #f8f9fa;
      border-left: 5px solid #17a2b8;
      padding: 1rem;
      margin-bottom: 1.5rem;
      font-family: 'Courier New', monospace;
      border-radius: 0.5rem;
      box-shadow: 0 2px 6px rgba(0, 0, 0, 0.05);
    }
    
    .tree-node {
      margin-left: 20px;
      position: relative;
    }
    
    .tree-root {
      margin-left: 0;
    }
    
    .tree-key {
      color: #0056b3;
      font-weight: bold;
      cursor: pointer;
      user-select: none;
    }
    
    .tree-key:hover {
      background-color: rgba(23, 162, 184, 0.1);
      border-radius: 3px;
    }
    
    .tree-value {
      margin-left: 10px;
    }
    
    .tree-string { color: #28a745; }
    .tree-number { color: #dc3545; }
    .tree-boolean { color: #fd7e14; }
    .tree-null { color: #6c757d; }
    
    .tree-toggle {
      display: inline-block;
      width: 16px;
      text-align: center;
      cursor: pointer;
      color: #666;
      font-weight: bold;
      margin-right: 5px;
    }
    
    .tree-toggle:hover {
      color: #333;
    }
    
    .tree-collapsed {
      display: none;
    }
    
    .tree-line {
      border-left: 1px solid #dee2e6;
      padding-left: 15px;
      margin-left: 8px;
    }
    
    .tree-item {
      margin: 2px 0;
      line-height: 1.4;
    }
    
    .tree-count {
      color: #6c757d;
      font-size: 0.9em;
      font-style: italic;
    }
  </style>
</head>
<body>
  <div class="container mt-4">
    <h2>Stats for: <%= shortUrl.short %></h2>
    <p><strong>Original URL:</strong> <a href="<%= shortUrl.full %>"><%= shortUrl.full %></a></p>
    <p><strong>Total Clicks:</strong> <%= shortUrl.clicks %></p>
    <a href="/admin" class="btn btn-secondary mb-3">Back to Admin</a>
    <a href="/admin" class="btn btn-secondary mb-3">Back to Admin</a>
<!-- Add these two buttons -->
<div class="mb-3">
  <button id="expandAllBtn" class="btn btn-primary btn-sm mr-2">Expand All</button>
  <button id="collapseAllBtn" class="btn btn-secondary btn-sm">Collapse All</button>
</div>

    <% logs.forEach((log, index) => { %>
      <div class="json-tree">
        <div class="tree-item">
          <span class="tree-toggle" onclick="toggleNode(this)">▼</span>
          <span class="tree-key">Log Entry #<%= index + 1 %></span>
          <span class="tree-count">(click to expand/collapse)</span>
        </div>
        <div class="tree-line tree-root" data-json="<%- JSON.stringify(log.data || log).replace(/"/g, '&quot;') %>">
          <!-- Tree content will be generated by JavaScript -->
        </div>
      </div>
    <% }) %>
  </div>

  <script>

function expandAll() {
  document.querySelectorAll('.tree-toggle').forEach(toggle => {
    const content = toggle.parentElement.nextElementSibling || 
                   toggle.parentElement.parentElement.querySelector('.tree-line');
    if (content) {
      content.style.display = 'block';
      content.classList.remove('tree-collapsed');
      toggle.textContent = '▼';
    }
  });
}

function collapseAll() {
  document.querySelectorAll('.tree-toggle').forEach(toggle => {
    const content = toggle.parentElement.nextElementSibling || 
                   toggle.parentElement.parentElement.querySelector('.tree-line');
    if (content) {
      content.style.display = 'none';
      content.classList.add('tree-collapsed');
      toggle.textContent = '▶';
    }
  });
}

// Add event listeners for the buttons
document.addEventListener('DOMContentLoaded', function() {
  document.getElementById('expandAllBtn').addEventListener('click', expandAll);
  document.getElementById('collapseAllBtn').addEventListener('click', collapseAll);
  
  // Your existing initialization code
  const treeContainers = document.querySelectorAll('.tree-root[data-json]');
  treeContainers.forEach(container => {
    try {
      const jsonData = JSON.parse(container.getAttribute('data-json'));
      renderJsonTree(container, jsonData);
    } catch (e) {
      container.innerHTML = '<span class="tree-value" style="color: #dc3545;">Error parsing JSON data</span>';
    }
  });
});

    function toggleNode(toggleEl) {
      const content = toggleEl.parentElement.nextElementSibling;
      if (content.style.display === 'none') {
        content.style.display = 'block';
        toggleEl.textContent = '▼';
      } else {
        content.style.display = 'none';
        toggleEl.textContent = '▶';
      }
    }

    function toggleChild(toggleEl) {
      const siblings = toggleEl.parentElement.parentElement.children;
      for (let i = 1; i < siblings.length; i++) {
        const sibling = siblings[i];
        if (sibling.classList.contains('tree-collapsed')) {
          sibling.classList.remove('tree-collapsed');
          toggleEl.textContent = '▼';
        } else {
          sibling.classList.add('tree-collapsed');
          toggleEl.textContent = '▶';
        }
      }
    }

    function createTreeNode(key, value, isLast = false) {
      const div = document.createElement('div');
      div.className = 'tree-item';
      
      if (value === null) {
        div.innerHTML = `<span class="tree-key">${key}:</span> <span class="tree-value tree-null">null</span>`;
      } else if (typeof value === 'string') {
        div.innerHTML = `<span class="tree-key">${key}:</span> <span class="tree-value tree-string">"${escapeHtml(value)}"</span>`;
      } else if (typeof value === 'number') {
        div.innerHTML = `<span class="tree-key">${key}:</span> <span class="tree-value tree-number">${value}</span>`;
      } else if (typeof value === 'boolean') {
        div.innerHTML = `<span class="tree-key">${key}:</span> <span class="tree-value tree-boolean">${value}</span>`;
      } else if (Array.isArray(value)) {
        div.innerHTML = `
          <span class="tree-toggle" onclick="toggleChild(this)">▼</span>
          <span class="tree-key">${key}:</span> 
          <span class="tree-count">[${value.length} items]</span>
        `;
        const childContainer = document.createElement('div');
        childContainer.className = 'tree-line';
        
        value.forEach((item, index) => {
          const childNode = createTreeNode(`[${index}]`, item, index === value.length - 1);
          childContainer.appendChild(childNode);
        });
        
        div.appendChild(childContainer);
      } else if (typeof value === 'object') {
        const keys = Object.keys(value);
        div.innerHTML = `
          <span class="tree-toggle" onclick="toggleChild(this)">▼</span>
          <span class="tree-key">${key}:</span> 
          <span class="tree-count">{${keys.length} properties}</span>
        `;
        const childContainer = document.createElement('div');
        childContainer.className = 'tree-line';
        
        keys.forEach((childKey, index) => {
          const childNode = createTreeNode(childKey, value[childKey], index === keys.length - 1);
          childContainer.appendChild(childNode);
        });
        
        div.appendChild(childContainer);
      }
      
      return div;
    }

    function escapeHtml(text) {
      const div = document.createElement('div');
      div.textContent = text;
      return div.innerHTML;
    }

    function renderJsonTree(container, data) {
      container.innerHTML = '';
      
      if (typeof data === 'object' && data !== null) {
        const keys = Object.keys(data);
        keys.forEach((key, index) => {
          const node = createTreeNode(key, data[key], index === keys.length - 1);
          container.appendChild(node);
        });
      } else {
        const node = createTreeNode('value', data);
        container.appendChild(node);
      }
    }

    // Initialize trees when page loads
    document.addEventListener('DOMContentLoaded', function() {
      const treeContainers = document.querySelectorAll('.tree-root[data-json]');
      treeContainers.forEach(container => {
        try {
          const jsonData = JSON.parse(container.getAttribute('data-json'));
          renderJsonTree(container, jsonData);
        } catch (e) {
          container.innerHTML = '<span class="tree-value" style="color: #dc3545;">Error parsing JSON data</span>';
        }
      });
    });
  </script>
</body>
</html>